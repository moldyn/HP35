#!/usr/bin/env bash

# Parse arguments
_color_val=${1:-0}

### HELPER FUNCTIONS ##########################################################
# define colors
reset='\e[0m'

white='255'
black='0'
grey='238'
red='161'
blue='037'
orange='208'
green='148'

blink='\e[5m'
bold='\e[1m'

setfc() {
  printf "\e[38:5:%sm" "$1"
}

setbg() {
  printf "\e[48:5:%sm" "$1"
}


print_welcome() {
  # reset font
  printf "%b" "${reset}"

  local _str=$(ptri "${bold}~~~ ROBUST CLUSTERING BENCHMARK ~~~" "$blue")
  printf "\n%b%b\n" "$_str"
  printf "generating microstate trajectory with dpca+ and robust clustering\n"
  printf "this script is part of %sHP35-Benchmark\n" "$MOLDYN_GIT" 
  printf "Copyright (c) 2020, Daniel Nagel\n"
  printf "\n"
}


print_info() {
  local _user=$(whoami)
  local _host=$(hostname)

  pheader "RUNTIME INFORMATION"
  pprint "user: ${_user}@${_host}\n"
  warn "depening on the hardware it can take up to several hours.\n"
  warn "several GB of data are downloaded, be sure to use wifi.\n"
}


printf_prefix() {
  local _date="$(showdate)"
  local _level=""
  case "$3" in
    '1')
      _level="↪  "
      ;;
    '2')
      _level="   ↪  "
      ;;
  esac

  if [ "$2" == "" ]; then
    if [[ $_level = "" ]]; then
      local _datestr=$(ptri "$_date" "$grey")
      local _labelstr=""
    else
      local _datestr=$(ptri "$_date" "$grey" "$grey")
      local _labelstr=$(ptri "$_level" "$grey")
    fi
    printf "%b%b%b " "$_datestr" "$_labelstr" "$reset"
  else
    local _datestr=$(ptri "$_date" "$grey" "$1")
    local _labelstr=$(ptri "$_level$2" "$1")
    printf "%b%b%b " "$_datestr" "$_labelstr" "$reset"
  fi
}


pheader() {
  local _suf=$(ptri "${bold}~~~~~~~~" "$grey" "$blue")
  local _str=$(ptri "${bold}$1" "$blue")
  printf "%b%b\n" "$_suf" "$_str"
}


pprint() {
    # $1 string to print
    # $2 color of symbol
    # $3 symbol
    # $4 level of indent
    prefix=$(printf_prefix "$2" "$3" "$4")
    printf "%b%b" "$prefix" "$1"
}


perror() {
    # see pprint
    prefix=$(printf_prefix "$2" "$3" "$4")
    printf "%b%b" "$prefix" "$1" 1>&2
}


warn() {
    pprint "$1" "$orange" "${bold}!" "$2"
}


ptri() {
  # $1 string to print
  # $2 color of box/text
  # $3 color of leading element
  if [[ $1 == "" ]]; then
    printf ""
  else
    case "$_color_val" in
      "0")
        printf "[%b]" "$1" 
        ;;
      "1")
	local _fc="$(setfc $2)"
        printf "[%b%b%b]" "$reset$_fc" "$1" "$reset"
        ;;
      "2")
        local _bg="$(setbg $2)"
        local _fc="$(setfc $white)"
        local _bgTwo=""
        if [[ $# -gt 2 ]]; then 
          _bgTwo="$(setbg $3)"
        fi
        local _fcTwo="$(setfc $2)"
        printf "%b %b %b%b" "$reset$_fc$_bg" "$1" "$reset$_fcTwo$_bgTwo" "$reset"
        ;;
    esac
  fi
}


run_command() {
    # $1 string to print
    # $2 string to execute
    # $3 level of print, default 0
    local _level=${3:-0}
    pprint "$1" "$blue" "${blink}${bold}…" "$_level"

    if [[ $verbosity != 0 ]]; then
      printf "\n$ %s\n" "$2"
      eval $2
    else
      eval $2 1>/dev/null 2>&1
    fi
    retval=$?

    # check if failed
    printf "\r"
    if [[ $retval == 0 ]]; then
      pprint "$1\n" "$green" "${bold}✔" "$_level"
    else
      perror "$1\n" "$red" "${bold}✘" "$_level"
      # print only help if output was not suppressed
      if [[ $2 != */dev/null* ]]; then
        perror "Use -v for more information.\n" "" "" "$(($_level+1))"
      fi
      return_val=$((return_val+1))
    fi
}


showdate() {
  local _date
  _date=$(date +%d-%H:%M)
  printf "$_date"
}


mkdir_ask() {
  if [ -d "$1" ]; then
    warn "The directory exists already. Do you wish to delete:\n'$(pwd)/$1'\n"
    select yn in "Yes" "No"; do
      case $yn in
        "Yes")
          rm -fr $1;
          break
          ;;
        "No")
          exit
          ;;
        * ) echo "select 1 or 2";;
      esac
    done
  fi
  # create dir
  mkdir $1
}
