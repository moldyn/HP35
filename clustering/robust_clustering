#!/usr/bin/env bash
### ROBUST CLUSTERING #########################################################
# Reproduces the results of Nagel23 and show cases how to use the robust
# clustering framework.
#
# If this script is used, please cite:
# D. Nagel, S. Satore, and G. Stock, "Selecting Features for Markov Modeling: A
# Case Study on HP35" J. Chem. Theory Comput., submitted
#
# Author: Daniel Nagel
# Copyright (C) 2023, Daniel Nagel
#
# Arguments:
#   h: show help
#   v: set verbosity mode, the more consecutive 'v' the higher
#   c: color_lvl - 0 none, 1 some, 2 utf8
#
###############################################################################

### CONSTANTS #################################################################
# variables
readonly SIGMA="10"
readonly PMIN="153"

# paths
readonly MOLDYN_GIT="https://github.com/moldyn/"
readonly TRAJ_DIH="../HP35-DESRES/hp35.dihs.shifted"
readonly TRAJ_CONTACTS="../HP35-DESRES/hp35.mindists2"
readonly TRAJ_DIH_GAUSSIAN="${TRAJ_DIH}.gaussian${SIGMA}f"
readonly TRAJ_CONTACTS_GAUSSIAN="${TRAJ_CONTACTS}.gaussian${SIGMA}f"
readonly TRAJ_DIH_PCA="../dpca/${TRAJ_DIH_GAUSSIAN##*/}.proj"
readonly TRAJ_DIH_PCS="${TRAJ_DIH_PCA}.1-4"
readonly TRAJ_CONTACTS_PCA="../conpca/${TRAJ_CONTACTS_GAUSSIAN##*/}.proj"
readonly TRAJ_CONTACTS_PCS="${TRAJ_CONTACTS_PCA}.1-5"
readonly TRAJ_DIH_MS="../clustering_dihs/microstates"
readonly TRAJ_CONTACTS_MS="../clustering_contacts/microstates"
readonly DIR="robust_clustering_benchmark"

# define executables
readonly CLUSTERING="../Clustering/build/clustering"
readonly FASTPCA="../FastPCA/build/src/fastpca"

# define requirements except of python venv
declare -a requirements=("gcc" "nvcc" "git" "git-lfs" "python3")
### MAIN ######################################################################
main() {
  # print welcome
  print_welcome

  # print user info and warning
  print_info

  # remove dir if existing
  mkdir_ask $DIR
  cd $DIR
  printf "\n"

  pheader "CHECK REQUIREMENTS"
  for req in "${requirements[@]}"; do
    run_command "$req" "command -v $req >/dev/null 2>&1"
  done
  run_command "python venv" "python3 -m venv -h >/dev/null 2>&1"
  cleanup_if_failed


  ### SETUP PYTHON VENV #######################################################
  pheader "SETUP PYTHON VENV"
  run_command "create venv" "python3 -m venv Python"
  run_command "activate venv" ". Python/bin/activate"
  run_command "update pip" "pip install --upgrade pip"
  run_command "install dependencies" "pip install numpy pandas click msmhelper"
  cleanup_if_failed


  ### COMPILE CLUSTERING ######################################################
  pheader "DOWNLOAD AND COMPILE ROBUST CLUSTERING"
  run_command "clone ${MOLDYN_GIT}Clustering.git" \
              "git clone ${MOLDYN_GIT}Clustering.git"
  cd Clustering && mkdir build && cd build
  # todo allow gcc 5 for cuda < 9.2
  nvcc_ver=$(nvcc --version | grep -o -P '(?<=release ).*(?=, V)')
  if [[ ${nvcc_ver:0:1} > 8 && ${nvcc_ver:2:1} > 1 ]]; then
    gcc_ver=7
  else
    gcc_ver=5
  fi
  run_command "cmake" \
              "cmake .. -DCMAKE_C_COMPILER=/usr/bin/gcc-${gcc_ver} -DCMAKE_CXX_COMPILER=/usr/bin/g++-${gcc_ver} -DUSE_CUDA=1"
  run_command "make" "make"
  cd ../../
  cleanup_if_failed


  ### COMPILE DPCA+ ###########################################################
  pheader "DOWNLOAD AND COMPILE DPC+"
  # get gcc version for selecting correct branch
  gcc_ver=$(gcc -dumpversion)
  if [[ ${gcc_ver:0:1} > 7 ]]; then
    branch="--branch fix_gcc8 "
  else
    branch=""
  fi
  run_command "clone ${MOLDYN_GIT}FASTPCA.git" \
              "git clone ${branch}${MOLDYN_GIT}FastPCA.git"
  cd FastPCA && mkdir build && cd build
  run_command "cmake" "cmake .."
  run_command "make" "make"
  cd ../../
  cleanup_if_failed


  ### DOWNLOAD HP35 BENCHMARK TRAJECTORY ######################################
  pheader "DOWNLOAD HP35 BENCHMARK TRAJECTORY"
  run_command "clone ${MOLDYN_GIT}HP35-DESRES.git" \
              "git clone ${MOLDYN_GIT}HP35-DESRES.git"
  cd HP35-DESRES
  run_command "unzip dihedral trajectory" "bunzip2 -k ${TRAJ_DIH}.bz2"
  run_command "unzip contacts trajectory" "bunzip2 -k ${TRAJ_CONTACTS}.bz2"
  cd ../
  cleanup_if_failed


  ### APPLY GAUSSIAN FILTERING ################################################
  pheader "APPLY GAUSSIAN FILTERING WITH SIGMA=2NS"
  cd HP35-DESRES
  run_command "smooth dihedrals" "python -m msmhelper gaussian-filtering -i ${TRAJ_DIH} -s $GAUSSIANSIGMA -o ${TRAJ_DIH_GAUSSIAN}"
  run_command "smooth contacts" "python -m msmhelper gaussian-filtering -i ${TRAJ_CONTACTS} -s $GAUSSIANSIGMA -o ${TRAJ_CONTACTS_GAUSSIAN}"
  cd ../
  cleanup_if_failed


  ### RUN DPCA+ ###############################################################
  pheader "RUN DPCA+ on dihedrals"
  mkdir dpca && cd dpca
  run_command "perform pca" \
              "$FASTPCA -f $TRAJ_DIH_GAUSSIAN -p $TRAJ_DIH_PCA -c traj.cov -v traj.vec -s traj.stats -l traj.val --verbose"
  # select PCs of interest
  run_command "extract pcs 1-4" \
              "$(awk '{print $1, $2, $3, $4}' $TRAJ_DIH_PCA > $TRAJ_DIH_PCS)"
  cd ../
  cleanup_if_failed


  ### RUN conPCA ##############################################################
  pheader "RUN conPCA on contacts"
  mkdir conpca && cd conpca
  run_command "perform pca" \
              "$FASTPCA -f $TRAJ_CONTACTS_GAUSSIAN -N -p $TRAJ_CONTACTS_PCA -c traj.corr -v traj.vec -s traj.stats -l traj.val --verbose"
  # select PCs of interest
  run_command "extract pcs 1-5" \
              "$(awk '{print $1, $2, $3, $4, $5}' $TRAJ_CONTACTS_PCA > $TRAJ_CONTACTS_PCS)"
  cd ../
  cleanup_if_failed


  ### RUN CLUSTERING ##########################################################
  pheader "RUN ROBUST CLUSTERING ON DIHEDRALS"
  mkdir clustering_dihs && cd clustering_dihs
  run_command "estimate free energy" \
              "$CLUSTERING density -f $TRAJ_DIH_PCS -pop -d fe -b nn -v"
  run_command "density screening" \
              "$CLUSTERING density -f $TRAJ_DIH_PCS -T -1 -D fe -B nn -o cluster -v"
  run_command "generating network" \
              "$CLUSTERING network -p $PMIN -b cluster -v"
  run_command "build microstate trajectory" \
              "$CLUSTERING density -f $TRAJ_DIH_PCS -i network_end_node_traj.dat -D fe -B nn -o $TRAJ_DIH_MS -v"
  cd ../
  cleanup_if_failed


  pheader "RUN ROBUST CLUSTERING ON CONTACTS"
  mkdir clustering_contacts && cd clustering_contacts
  run_command "estimate free energy" \
              "$CLUSTERING density -f $TRAJ_CONTACTS_PCS -pop -d fe -b nn -v"
  run_command "density screening" \
              "$CLUSTERING density -f $TRAJ_CONTACTS_PCS -T -1 -D fe -B nn -o cluster -v"
  run_command "generating network" \
              "$CLUSTERING network -p $PMIN -b cluster -v"
  run_command "build microstate trajectory" \
              "$CLUSTERING density -f $TRAJ_CONTACTS_PCS -i network_end_node_traj.dat -D fe -B nn -o $TRAJ_CONTACTS_MS -v"
  cd ../
  cleanup_if_failed
}


### DEFINE LOCAL FUNCTIONS ####################################################
cleanup_if_failed() {
  if [[ $return_val != 0 ]]; then
    cd ..;
    err "aborting and cleaning"
    rmdir_ask $DIR
    printf "%b\n" "$reset"
    exit $return_val
  fi
}

print_welcome() {
  # reset font
  printf "%b" "${reset}"

  # local _str=$(ptri "${bold}~~~ ROBUST CLUSTERING BENCHMARK ~~~" "$blue")
  local _str=$(pbox "${bold}~~~ ROBUST CLUSTERING BENCHMARK ~~~" "$blue")
  printf "\n%b%b\n" "$_str"
  printf "generating microstate trajectories of Nagel23 using backbone\n"
  printf "dihedral angles and contact distances.\n" "$MOLDYN_GIT"
  printf "Copyright (c) 2023, Daniel Nagel\n"
  printf "\n"
}


print_info() {
  local _user=$(whoami)
  local _host=$(hostname)

  pheader "RUNTIME INFORMATION"
  pprint "user: ${_user}@${_host}\n"
  warn "depening on the hardware it can take up to several hours.\n"
  warn "several GB of data are downloaded, be sure to use wifi.\n"
}


### SOURCE BASH HELPER FUNCTIONS ##############################################
. ../bash-template/libbash.sh -d "$@"

# run main
main
exit $return_val
